import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as space, e as element, b as svg_element, t as text, q as query_selector_all, c as detach_dev, f as claim_space, g as claim_element, h as children, j as claim_text, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as noop } from './client.f831024c.js';

/* src/routes/index.svelte generated by Svelte v3.31.2 */

const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let header;
	let div;
	let a0;
	let svg0;
	let path0;
	let t1;
	let span;
	let t2;
	let t3;
	let nav;
	let a1;
	let t4;
	let t5;
	let a2;
	let t6;
	let t7;
	let a3;
	let t8;
	let t9;
	let a4;
	let t10;
	let t11;
	let button;
	let t12;
	let svg1;
	let path1;

	const block = {
		c: function create() {
			t0 = space();
			header = element("header");
			div = element("div");
			a0 = element("a");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t1 = space();
			span = element("span");
			t2 = text("Tailblocks");
			t3 = space();
			nav = element("nav");
			a1 = element("a");
			t4 = text("First Link");
			t5 = space();
			a2 = element("a");
			t6 = text("Second Link");
			t7 = space();
			a3 = element("a");
			t8 = text("Third Link");
			t9 = space();
			a4 = element("a");
			t10 = text("Fourth Link");
			t11 = space();
			button = element("button");
			t12 = text("Button\n      ");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oh6yg0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div = claim_element(header_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a0 = claim_element(div_nodes, "A", { class: true });
			var a0_nodes = children(a0);

			svg0 = claim_element(
				a0_nodes,
				"svg",
				{
					xmlns: true,
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg0_nodes = children(svg0);
			path0 = claim_element(svg0_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);
			svg0_nodes.forEach(detach_dev);
			t1 = claim_space(a0_nodes);
			span = claim_element(a0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Tailblocks");
			span_nodes.forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			nav = claim_element(div_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			a1 = claim_element(nav_nodes, "A", { class: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, "First Link");
			a1_nodes.forEach(detach_dev);
			t5 = claim_space(nav_nodes);
			a2 = claim_element(nav_nodes, "A", { class: true });
			var a2_nodes = children(a2);
			t6 = claim_text(a2_nodes, "Second Link");
			a2_nodes.forEach(detach_dev);
			t7 = claim_space(nav_nodes);
			a3 = claim_element(nav_nodes, "A", { class: true });
			var a3_nodes = children(a3);
			t8 = claim_text(a3_nodes, "Third Link");
			a3_nodes.forEach(detach_dev);
			t9 = claim_space(nav_nodes);
			a4 = claim_element(nav_nodes, "A", { class: true });
			var a4_nodes = children(a4);
			t10 = claim_text(a4_nodes, "Fourth Link");
			a4_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			t11 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t12 = claim_text(button_nodes, "Button\n      ");

			svg1 = claim_element(
				button_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg1_nodes = children(svg1);
			path1 = claim_element(svg1_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			svg1_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(path0, "d", "M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5");
			add_location(path0, file, 10, 8, 517);
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg0, "fill", "none");
			attr_dev(svg0, "stroke", "currentColor");
			attr_dev(svg0, "stroke-linecap", "round");
			attr_dev(svg0, "stroke-linejoin", "round");
			attr_dev(svg0, "stroke-width", "2");
			attr_dev(svg0, "class", "w-10 h-10 text-white p-2 bg-indigo-500 rounded-full");
			attr_dev(svg0, "viewBox", "0 0 24 24");
			add_location(svg0, file, 9, 6, 290);
			attr_dev(span, "class", "ml-3 text-xl");
			add_location(span, file, 12, 6, 610);
			attr_dev(a0, "class", "flex title-font font-medium items-center text-gray-900 mb-4 md:mb-0");
			add_location(a0, file, 8, 4, 204);
			attr_dev(a1, "class", "mr-5 hover:text-gray-900");
			add_location(a1, file, 15, 6, 752);
			attr_dev(a2, "class", "mr-5 hover:text-gray-900");
			add_location(a2, file, 16, 6, 809);
			attr_dev(a3, "class", "mr-5 hover:text-gray-900");
			add_location(a3, file, 17, 6, 867);
			attr_dev(a4, "class", "mr-5 hover:text-gray-900");
			add_location(a4, file, 18, 6, 924);
			attr_dev(nav, "class", "md:ml-auto flex flex-wrap items-center text-base justify-center");
			add_location(nav, file, 14, 4, 668);
			attr_dev(path1, "d", "M5 12h14M12 5l7 7-7 7");
			add_location(path1, file, 22, 8, 1297);
			attr_dev(svg1, "fill", "none");
			attr_dev(svg1, "stroke", "currentColor");
			attr_dev(svg1, "stroke-linecap", "round");
			attr_dev(svg1, "stroke-linejoin", "round");
			attr_dev(svg1, "stroke-width", "2");
			attr_dev(svg1, "class", "w-4 h-4 ml-1");
			attr_dev(svg1, "viewBox", "0 0 24 24");
			add_location(svg1, file, 21, 6, 1144);
			attr_dev(button, "class", "inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0");
			add_location(button, file, 20, 4, 991);
			attr_dev(div, "class", "container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center");
			add_location(div, file, 7, 2, 115);
			attr_dev(header, "class", "text-gray-600 body-font");
			add_location(header, file, 6, 0, 72);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, header, anchor);
			append_dev(header, div);
			append_dev(div, a0);
			append_dev(a0, svg0);
			append_dev(svg0, path0);
			append_dev(a0, t1);
			append_dev(a0, span);
			append_dev(span, t2);
			append_dev(div, t3);
			append_dev(div, nav);
			append_dev(nav, a1);
			append_dev(a1, t4);
			append_dev(nav, t5);
			append_dev(nav, a2);
			append_dev(a2, t6);
			append_dev(nav, t7);
			append_dev(nav, a3);
			append_dev(a3, t8);
			append_dev(nav, t9);
			append_dev(nav, a4);
			append_dev(a4, t10);
			append_dev(div, t11);
			append_dev(div, button);
			append_dev(button, t12);
			append_dev(button, svg1);
			append_dev(svg1, path1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(header);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYjRlMzA4ZTguanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
